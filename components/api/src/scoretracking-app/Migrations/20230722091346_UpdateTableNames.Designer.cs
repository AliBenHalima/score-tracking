// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScoreTracking.App.Database;

#nullable disable

namespace ScoreTracking.App.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230722091346_UpdateTableNames")]
    partial class UpdateTableNames
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScoreTracking.App.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<int?>("EndingType")
                        .HasColumnType("integer")
                        .HasColumnName("ending_type");

                    b.Property<bool>("HasJokerPenalty")
                        .HasColumnType("boolean")
                        .HasColumnName("has_joker_penalty");

                    b.Property<int>("JokerPenaltyValue")
                        .HasColumnType("integer")
                        .HasColumnName("joker_penalty_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("ScoreTracking.App.Models.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_rounds");

                    b.ToTable("rounds", (string)null);
                });

            modelBuilder.Entity("ScoreTracking.App.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTimeOffset(new DateTime(2023, 7, 22, 9, 13, 46, 298, DateTimeKind.Unspecified).AddTicks(2858), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Test1@gmail.com",
                            FirstName = "Robert",
                            LastName = "Lara",
                            Phone = "+21600000001",
                            Updated = new DateTimeOffset(new DateTime(2023, 7, 22, 9, 13, 46, 298, DateTimeKind.Unspecified).AddTicks(2879), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTimeOffset(new DateTime(2023, 7, 22, 9, 13, 46, 298, DateTimeKind.Unspecified).AddTicks(2887), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "Test2@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "+21600000002",
                            Updated = new DateTimeOffset(new DateTime(2023, 7, 22, 9, 13, 46, 298, DateTimeKind.Unspecified).AddTicks(2889), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("ScoreTracking.App.Models.UserGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("GameId")
                        .HasColumnType("integer")
                        .HasColumnName("game_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_games");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_user_games_game_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_games_user_id");

                    b.ToTable("user_games", (string)null);
                });

            modelBuilder.Entity("ScoreTracking.App.Models.UserGameRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Jokers")
                        .HasColumnType("integer")
                        .HasColumnName("jokers");

                    b.Property<int>("RoundId")
                        .HasColumnType("integer")
                        .HasColumnName("round_id");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("UserGameId")
                        .HasColumnType("integer")
                        .HasColumnName("user_game_id");

                    b.HasKey("Id")
                        .HasName("pk_user_game_rounds");

                    b.HasIndex("RoundId")
                        .HasDatabaseName("ix_user_game_rounds_round_id");

                    b.HasIndex("UserGameId")
                        .HasDatabaseName("ix_user_game_rounds_user_game_id");

                    b.ToTable("user_game_rounds", (string)null);
                });

            modelBuilder.Entity("ScoreTracking.App.Models.UserGame", b =>
                {
                    b.HasOne("ScoreTracking.App.Models.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_games_games_game_id");

                    b.HasOne("ScoreTracking.App.Models.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_games_users_user_id");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScoreTracking.App.Models.UserGameRound", b =>
                {
                    b.HasOne("ScoreTracking.App.Models.Round", "Round")
                        .WithMany("UserGameRounds")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_game_rounds_rounds_round_id1");

                    b.HasOne("ScoreTracking.App.Models.UserGame", "UserGame")
                        .WithMany("UserGameRounds")
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_game_rounds_user_games_user_game_id1");

                    b.Navigation("Round");

                    b.Navigation("UserGame");
                });

            modelBuilder.Entity("ScoreTracking.App.Models.Game", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("ScoreTracking.App.Models.Round", b =>
                {
                    b.Navigation("UserGameRounds");
                });

            modelBuilder.Entity("ScoreTracking.App.Models.User", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("ScoreTracking.App.Models.UserGame", b =>
                {
                    b.Navigation("UserGameRounds");
                });
#pragma warning restore 612, 618
        }
    }
}
